nextflow.enable.dsl=2

profiles{

    local {
        // ---- local laptop/desktop profile ----
    }

    hpc {
        //executor setting
        executor {
            name = 'slurm'
            queueSize = 1000
            submitRateLimit = '5 sec'
        }

        // basic process options
        process {
            // Slurm options
            executor = 'slurm'
            
            queue = 'xuanyao-hm'
            clusterOptions = '--account pi-xuanyao -p caslake'
            
            // resourses
            cpus = 1
            memory = '20 GB'
            // errorStrategy = 'retry'
            // maxRetries = 2
            
            // run script in login shell
            shell=['/bin/bash','-l']
            
            // some beforeScript settings
            beforeScript = 
            '''
            echo "------ loading conda and env -------"
            module load miniconda3-3.11.1
            source activate cNMF

            chmod u+x .command.sh

            '''

            /* ----------------- some specific options in process ----------------------*/
            // step 1: prepare_initial
            withName:prepare_initial {
                errorStrategy = 'retry'
                maxRetries = 2
                cpus = 1
                queue = 'caslake'
                memory = {task.attempt > 1 ? '200 GB' : '50 GB'}
                time = '2h'
            }

            // step 2: prepare generalize
            withName:prepare_generalized {
                cpus = 1
                queue = 'caslake'
                memory = '10 GB'
                time = '2h'
            }

            // step 3: factorize
            withName:factorize_worker {
                errorStrategy = 'retry'
                maxRetries = 2
                cpus = 1
                queue = 'caslake'
                memory = {task.attempt > 1 ? '128 GB' : '64 GB'}
                time = '35h'
            }

            withName:factorize_complete {
                cpus = 1
                queue = 'caslake'
                memory = '2.GB'
                time = '2h'    
            
            }

            // step 4: combine
            withName:factorize_complete {
                cpus = 1
                queue = 'caslake'
                memory = '20 GB'
                time = '2h'
            }
            withName:combine_results{
                errorStrategy = 'retry'
                maxRetries = 2
                queue = 'caslake'
                cpus = 1
                memory = {task.attempt > 1 ? '100 GB' : '50 GB'}
                time = '5h'
            }

            // step 5: kplot
            withName:kplot {
                queue = 'caslake'
                cpus = 1
                memory = '50 GB'
                time = '2h'
            }

        }
            
        
    }
}
